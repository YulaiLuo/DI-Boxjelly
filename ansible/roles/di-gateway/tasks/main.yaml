  # - name: Ensure destination directory exists
  #   ansible.builtin.file:
  #     path: '{{remote_work_dir}}'
  #     state: directory

  # # transfer the target module to the remote instance
  # - name: Synchronize '{{di_gateway_module_name}}' module code with remote server
  #   ansible.builtin.synchronize:
  #     src: '{{local_work_dir}}'
  #     dest: '{{remote_work_dir}}'
  #     delete: yes
  #     recursive: yes
  #     rsync_opts:
  #       - "--exclude=.git"
  #       - "--exclude-from=../.gitignore"

  - name: Stop and remove the existing '{{di_gateway_image_name}}' Docker container
    docker_container:
      name: '{{di_gateway_image_name}}'
      image: '{{di_gateway_image_name}}'
      state: absent

  - name: Remove the '{{di_gateway_image_name}}' Docker image
    docker_image:
      name: '{{di_gateway_image_name}}'
      state: absent

  - name: Create docker '{{di_gateway_image_name}}' docker image
    docker_image:
      name: '{{di_gateway_image_name}}'
      source: build
      state: present
      build: 
        path: '{{work_dir}}/{{di_gateway_module_name}}'
        nocache: yes
      
  - name: Run the '{{di_gateway_image_name}}' Docker image
    docker_container:
      name: '{{di_gateway_image_name}}'
      image: '{{di_gateway_image_name}}'
      state: started
      networks:   # Join the same docker network
        - name: '{{docker_network_name}}'
      published_ports:
        - '{{di_gateway_host_port}}:{{di_gateway_container_port}}'  # 8080:8080
        



  # - name: Update apt cache
  #   apt:
  #     update_cache: yes
  #     cache_valid_time: 86400 


  # - name: Install nginx and gunicorn to deploy flask gateway service
  #   apt:
  #     name: ['nginx','gunicorn']
  #     state: absent
  #     update_cache: yes
  #   become: true
